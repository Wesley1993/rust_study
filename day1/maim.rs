// Rust 程序入口函数，和其他语言一样，都是main，该函数目前无返回值
fn main() {
// 使用let 声明变量，进行绑定，a是不可变的
// 此处a没有指定类型，编译器会默认根据a的值推断类型为：i32，有符号32位整数
// 语句的末尾必须以分号结尾
    let a = 10;
// 主动指定b的类型为i32
    let b: i32 = 20;
// 这里有两点值得注意
// 1.可以在数值中带上类型：30i32表示数值是30，类型是i32
// 2.c是可变的，mut是mutable的缩写
    let mut c= 30i32;
    // 还能在数值和类型之间添加一个下划线，让可读性更好
    let d = 30_i32;
    // 和其他函数一样，可以使用一个函数的返回值来作为另一个函数的参数
    let e = add(add(a,b),add(c,d));

    // println!是宏调用，看起来像是函数但是它返回的是宏顶用的代码块
    // 该函数是将指定格式化字符串打印到控制台
    // {}是占位符，在具体执行过程中，会把e的值带入
    println!("(a+b)+(c+d) = {}",e);
}

// 定义一个函数，输入两个i32类型参数，返回一个i32类型的值
fn add(i: i32, j: i32) -> i32 {
    // 返回相加值，这里可以省略return
    i+ j
}
